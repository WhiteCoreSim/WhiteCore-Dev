;;
;; This file contains settings for the advanced fetures avialble in WhiteCore
;;

[PacketPool]
;; Enables the experimental packet pool. Yes, we've been here before.
RecyclePackets = true
RecycleDataBlocks = false

[InterestManagement]
;; This section controls how updates for prims and avatars are sent to the client

;; Should we only send the updates that clients can see (based on their draw distance)?
;; EXTREMELY NOT RECOMMENDED to disable!
;; Default: true
UseCulling = true

;; Culling based on distance
;; Default: true
UseDistanceBasedCulling = true

;; Distance child agent cameras have to move before updates are re-prioritized
ChildReprioritizationDistance = 20.0

[ClientStack.LindenUDP]
;; Allow UDP packets to be used for inventory
;;  (CAPS has been around for a long time, and newer API calls are being introduced)
;; Really should be false... but some viewers don't allow for CAPS only
;; ##  Newer viewers do not require this  ##
AllowUDPInventory = false

;; Set this to true to process incoming packets asynchronously. This can speed up the queue,
;;  but can also cause deadlocks, so watch out.
;; Default is true
async_packet_handling = true

;; The client socket receive buffer size determines how many
;; incoming requests we can process; the default on .NET is 8192
;; which is about 2 4k-sized UDP datagrams. On mono this is
;; whatever the underlying operating system has as default; for
;; example, ubuntu 8.04 or SLES11 have about 111k, which is about
;; 27 4k-sized UDP datagrams (on Linux platforms you can [as root]
;; do "sysctl net.core.rmem_default" to find out what your system
;; uses a default socket receive buffer size.
;;
;; client_socket_rcvbuf_size allows you to specify the receive
;; buffer size LLUDPServer should use. NOTE: this will be limited
;; by the system's settings for the maximum client receive buffer
;; size (on Linux systems you can set that with "sysctl -w
;; net.core.rmem_max=X")
;;
;client_socket_rcvbuf_size = 8388608

;; Maximum outbound bytes per second for a single scene. This can be used to
;; throttle total outbound UDP traffic for a simulator. The default value is
;; 0, meaning no throttling at the scene level. The example given here is
;; 20 megabits
;scene_throttle_max_bps = 2621440

;; Maximum bits per second to send to any single client. This will override
;; the user's viewer preference settings. The default value is 0, meaning no
;; aggregate throttling on clients (only per-category throttling). The
;; example given here is 1.5 megabits
;;
;client_throttle_max_bps = 196608

;; Per-client bytes per second rates for the various throttle categories.
;; These are default values that will be overridden by clients
;;
;resend_min = 1500
;land_min = 400
;wind_min = 500
;cloud_min = 300
;task_min = 1500
;texture_min = 1000
;asset_min = 250
;transfer_min = 1000
;state_min = 500
;avatar_info_min = 250

;; Per-client maximum burst rates in bytes per second for the various
;; throttle categories. These are default values that will be overridden by
;; clients
;;
;resend_limit = 18750
;land_limit = 29750
;wind_limit = 18750
;cloud_limit = 18750
;task_limit = 18750
;texture_limit = 55750
;asset_limit = 27500
;transfer_limit = 27500
;state_limit = 37000
;avatar_info_limit = 37000

;; TextureSendLimit determines how many packets will be put on
;; the outgoing queue each cycle. Like the settings above, this
;; is a balance between responsiveness to priority updates and
;; total throughput. Higher numbers will give a better
;; throughput at the cost of reduced responsiveness to client
;; priority changes or transfer aborts
;;
;TextureSendLimit = 20

;; Time before the client is disconnected because of inactivity (in seconds)
;; Default is 120
ClientTimeOut = 120

[System]
;; Sets the method that WhiteCore will use to fire asynchronous events. Valid values are:
;; UnsafeQueueUserWorkItem, QueueUserWorkItem, BeginInvoke, SmartThreadPool, Await, and Thread.
;; Await ONLY works on .net 4 with the Async CTP add on
;; SmartThreadPool is reported to work well on Mono/Linux
;; Defaults to SmartThreadPool  (SAFE for ALL PLATFORMS)
AsyncCallMethod = SmartThreadPool

;; This next config option only applies if you selected SmartThreadPool from above
;;
;; Max threads to allocate on the FireAndForget thread pool
;; when running with the SmartThreadPool option above
;; This defaults to 30, but this is a misleading default as it depends on your machine,
;;  real recommended are as follows
;; Single Core, 15
;; Dual Core, 30
;; Quad Core, 45
;MaxPoolThreads = 30
